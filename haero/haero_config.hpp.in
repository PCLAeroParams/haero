// This file is generated by the build system. PLEASE DO NOT MODIFY IT.
// Instead, edit your config.sh file and run it with "./config.sh".

#ifndef HAERO_CONFIG_HPP
#define HAERO_CONFIG_HPP

#include "ekat/ekat_pack.hpp"
#include "ekat/ekat_pack_utils.hpp"
#include "ekat/kokkos/ekat_kokkos_types.hpp"

namespace haero {
/// Real-valued numbers are of this type.
typedef @HAERO_REAL_TYPE@ Real;

/// Size for scalar packs (used for vector simd ops)
static constexpr int HAERO_PACK_SIZE = @HAERO_PACK_SIZE@;

#if @HAERO_DOUBLE_PRECISION@
#define HAERO_DOUBLE_PRECISION 1
#else
#define HAERO_SINGLE_PRECISION 1
#endif

/// This is the device on which the data is stored.
using DeviceType = ekat::KokkosTypes<ekat::DefaultDevice>;

/// Pack data structure for SIMD.
using PackType = ekat::Pack<Real, HAERO_PACK_SIZE>;

/// Helpers for pack/array indexing
using PackInfo = ekat::PackInfo<HAERO_PACK_SIZE>;

/// Views of this type store packs defined at every vertical level of a column.
using ColumnView  = DeviceType::view_1d<PackType>;

/// Views of this type store packs defined for each species population (for
/// aerosols or gases) at every vertical level of a column.
/// * The species population is identified by an index p.
/// * The vertical level index is identified by the index k.
/// So view[p][k] yields the desired pack.
using SpeciesColumnView  = DeviceType::view_2d<PackType>;

/// Views of this type store packs defined for each mode at every vertical level
/// of a column.
/// * The mode is identified by the index m.
/// * The vertical level index is identified by the index k.
/// So view[m][k] yields the desired pack.
using ModalColumnView    = DeviceType::view_2d<PackType>;

/// Are we building with Fortran support?
#define HAERO_FORTRAN @HAERO_FORTRAN@

}
#endif
