// This file is generated by the build system. PLEASE DO NOT MODIFY IT.
// Instead, edit your config.sh file and run it with "./config.sh".

#ifndef HAERO_CONFIG_HPP
#define HAERO_CONFIG_HPP

#include "ekat/ekat_pack.hpp"
#include "ekat/ekat_pack_utils.hpp"
#include "ekat/kokkos/ekat_kokkos_types.hpp"

namespace haero {

/// Real-valued numbers are of this type.
typedef @HAERO_REAL_TYPE@ Real;

/// Size for scalar packs (used for vector simd ops)
static constexpr int HAERO_PACK_SIZE = @HAERO_PACK_SIZE@;

#if @HAERO_DOUBLE_PRECISION@
#define HAERO_DOUBLE_PRECISION 1
#else
#define HAERO_SINGLE_PRECISION 1
#endif

#cmakedefine HAERO_USE_CUDA

#define HAERO_TEST_DATA_DIR "@CMAKE_CURRENT_SOURCE_DIR@/tests/data"

/// Pack data structures for SIMD
using PackType = ekat::Pack<Real, HAERO_PACK_SIZE>;
using IntPackType = ekat::Pack<int, HAERO_PACK_SIZE>;
using MaskType = ekat::Mask<HAERO_PACK_SIZE>;

/// Device and host types
using DeviceType = ekat::KokkosTypes<ekat::DefaultDevice>;
using HostType   = ekat::KokkosTypes<ekat::HostDevice>;

/// Execution space (based on DeviceType)
using ExecutionSpace = typename DeviceType::ExeSpace;

/// Kokkos team policy used to perform parallel dispatches of aerosol processes
/// over several columns.
using TeamPolicy = typename DeviceType::TeamPolicy;

/// Kokkos team type for the Kokkos::TeamThreadRange parallel dispatch policy.
/// This type is often called a TeamMember in other Kokkos codes, but it's
/// actually not a member of a team--it's a member of a league: in other words,
/// a team!
using TeamType = typename DeviceType::MemberType;

/// A TracersView іs a rank 3 Kokkos View with the following indices:
/// 1. A tracer index identifying an advected quantity
/// 2. A column index identifying a unique atmospheric column
/// 3. A level index identifying a unique pack containing a set of data
///    associated with adjacent vertical levels.
using TracersView = typename DeviceType::view_3d<PackType>;

/// A DiagnosticsView іs a rank 3 Kokkos View with the following indices:
/// 1. A diagnostic index identifying a diagnostic quantity
/// 2. A column index identifying a unique atmospheric column
/// 3. A level index identifying a unique pack containing a set of data
///    associated with adjacent vertical levels.
using DiagnosticsView = typename DeviceType::view_3d<PackType>;

}
#endif
