#define c_real c_@HAERO_REAL_TYPE@

!> This module contains data structures that allow Fortran modules to access
!> data from the C++ model, prognostics, and diagnostics.
module haero

  use iso_c_binding

  implicit none

  private

  public :: wp, mode_t, species_t, model_t, &
            prognostics_t, diagnostics_t, tendencies_t, &
            model

  !> Working precision real kind
  integer, parameter :: wp = c_real

  !> This Fortran type is the equivalent of the C++ Mode struct.
  type :: mode_t
    !> Mode name
    character(len=1), dimension(32) :: name
    !> Minimum particle diameter
    real(wp) :: min_diameter
    !> Maximum particle diameter
    real(wp) :: max_diameter
    !> Geometric mean standard deviation
    real(wp) :: mean_std_dev
  end type

  !> This Fortran type is the equivalent of the C++ Species struct.
  type :: species_t
    !> Species name
    character(len=1), dimension(32) :: name
    !> Species symbol (abbreviation)
    character(len=1), dimension(8)  :: symbol
  end type

  !> This Fortran type is the equivalent of the C++ Model class. Exactly one
  !> read-only instance of a model is available to Fortran processes.
  type :: model_t
    !> The aerosol modes in the model, in indexed order.
    type(mode_t), dimension(:), allocatable :: modes
    !> The aerosol species within each mode. Indexed as (mode, species).
    type(species_t), dimension(:,:), allocatable :: aero_species
    !> The gas species in the model.
    type(species_t), dimension(:), allocatable :: gas_species
    !> The number of columns in the model.
    integer :: num_columns
    !> The number of vertical levels in each column.
    integer :: num_levels
  end type

  !> The resident model instance, available to the single allowable C++ model
  !> instance that uses Fortran-backed processes.
  type(model_t) :: model

  !> This type represents the set of prognostic variables for an aerosol
  !> model.
  type :: prognostics_t
    type(c_ptr) :: ptr
  contains
    procedure :: int_aero_mix_frac => p_int_aero_mix_frac
    procedure :: cld_aero_mix_frac => p_cld_aero_mix_frac
    procedure :: gas_mole_frac => p_gas_mole_frac
    procedure :: modal_num_densities => p_modal_num_densities
  end type

  !> This type represents the set of diagnostic variables for an aerosol
  !> model.
  type :: diagnostics_t
    type(c_ptr) :: ptr
  contains
    procedure :: has_var => d_has_var
    procedure :: var => d_var
    procedure :: has_modal_var => d_has_modal_var
    procedure :: modal_var => d_modal_var
  end type

  !> This type represents a set of tendencies to be computed by a prognostic
  !> process.
  type :: tendencies_t
    type(c_ptr) :: ptr
  contains
    procedure :: int_aero_mix_frac => t_int_aero_mix_frac
    procedure :: cld_aero_mix_frac => t_cld_aero_mix_frac
    procedure :: gas_mole_frac => t_gas_mole_frac
    procedure :: modal_num_densities => t_modal_num_densities
  end type

  interface

    subroutine p_get_int_aero_mix_frac_c(p, mode, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_int
      type(c_ptr), value, intent(in) :: p
      integer(c_int), value, intent(in) :: mode
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    subroutine p_get_cld_aero_mix_frac_c(p, mode, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_int
      type(c_ptr), value, intent(in) :: p
      integer(c_int), value, intent(in) :: mode
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    subroutine p_get_gas_mole_frac_c(p, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_int
      type(c_ptr), value, intent(in) :: p
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    subroutine p_get_modal_num_densities_c(p, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_int
      type(c_ptr), value, intent(in) :: p
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    logical(c_bool) function d_has_var_c(d, name) bind(c)
      use iso_c_binding, only: c_bool, c_ptr, c_char
      type(c_ptr), value, intent(in) :: d
      character(kind=c_char, len=1), dimension(*), intent(in) :: name
    end function

    subroutine d_get_var_c(p, name, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_char, c_int
      type(c_ptr), value, intent(in) :: p
      character(kind=c_char, len=1), dimension(32), intent(in) :: name
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    logical(c_bool) function d_has_modal_var_c(d, name) bind(c)
      use iso_c_binding, only: c_bool, c_char, c_ptr, c_char
      type(c_ptr), value, intent(in) :: d
      character(kind=c_char, len=1), dimension(*), intent(in) :: name
    end function

    subroutine d_get_modal_var_c(d, name, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_char, c_int
      type(c_ptr), value, intent(in) :: d
      character(kind=c_char, len=1), dimension(32), intent(in) :: name
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    subroutine t_get_int_aero_mix_frac_c(t, mode, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_int
      type(c_ptr), value, intent(in) :: t
      integer(c_int), value, intent(in) :: mode
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    subroutine t_get_cld_aero_mix_frac_c(t, mode, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_int
      type(c_ptr), value, intent(in) :: t
      integer(c_int), value, intent(in) :: mode
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    subroutine t_get_gas_mole_frac_c(t, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_int
      type(c_ptr), value, intent(in) :: t
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

    subroutine t_get_modal_num_densities_c(t, v_ptr, v_shape) bind(c)
      use iso_c_binding, only: c_ptr, c_int
      type(c_ptr), value, intent(in) :: t
      type(c_ptr), intent(out) :: v_ptr
      integer(c_int), dimension(3), intent(out) :: v_shape
    end subroutine

  end interface

contains

  ! Begin the process of initializing the Haero Fortran module.
  subroutine haerotran_begin_init() bind(c)
    ! Nothing here yet!
  end subroutine

  ! Set the number of modes in the global model.
  subroutine haerotran_set_num_modes(num_modes) bind(c)
    use iso_c_binding, only: c_int
    implicit none

    integer(c_int), value, intent(in) :: num_modes

    allocate(model%modes(num_modes))
  end subroutine

  subroutine haerotran_set_max_modal_aero_species(max_num_species) bind(c)
    use iso_c_binding, only: c_int
    implicit none

    integer(c_int), value, intent(in) :: max_num_species

    allocate(model%aero_species(size(model%modes), max_num_species))
  end subroutine

  subroutine haerotran_set_mode(mode, name, min_d, max_d, std_dev) bind(c)
    use iso_c_binding, only: c_char, c_real
    implicit none

    integer(c_int), intent(in) :: mode
    character(kind=c_char, len=1), dimension(:), intent(in) :: name
    real(c_real), value, intent(in) :: min_d
    real(c_real), value, intent(in) :: max_d
    real(c_real), value, intent(in) :: std_dev

    integer :: i

    do i=1, min(32,size(name))
      model%modes(mode)%name(i:i) = name(i)
    end do
    model%modes(mode)%min_diameter = min_d
    model%modes(mode)%max_diameter = max_d
    model%modes(mode)%mean_std_dev = std_dev

  end subroutine

  subroutine haerotran_set_aero_species(mode, species, name, symbol) bind(c)
    use iso_c_binding, only: c_int, c_char
    implicit none

    integer(c_int), intent(in) :: mode
    integer(c_int), intent(in) :: species
    character(kind=c_char, len=1), dimension(:), intent(in) :: name
    character(kind=c_char, len=1), dimension(:), intent(in) :: symbol

    integer :: i

    do i=1, min(32,size(name))
      model%aero_species(mode, species)%name(i:i) = name(i)
    end do
    do i=1, min(8,size(symbol))
      model%aero_species(mode, species)%symbol(i:i) = symbol(i)
    end do
  end subroutine

  subroutine haerotran_set_num_gas_species(num_species) bind(c)
    use iso_c_binding, only: c_int
    implicit none

    integer(c_int), value, intent(in) :: num_species

    allocate(model%gas_species(num_species))
  end subroutine

  subroutine haerotran_set_gas_species(species, name, symbol) bind(c)
    use iso_c_binding, only: c_char, c_int
    implicit none

    integer(c_int), intent(in) :: species
    character(kind=c_char, len=1), dimension(:), intent(in) :: name
    character(kind=c_char, len=1), dimension(:), intent(in) :: symbol

    integer :: i

    do i=1, min(32,size(name))
      model%gas_species(species)%name(i:i) = name(i)
    end do
    do i=1, min(8,size(symbol))
      model%gas_species(species)%symbol(i:i) = symbol(i)
    end do
  end subroutine

  subroutine haerotran_set_num_columns(num_columns) bind(c)
    use iso_c_binding, only: c_int
    implicit none

    integer(c_int), value, intent(in) :: num_columns

    model%num_columns = num_columns
  end subroutine

  subroutine haerotran_set_num_levels(num_levels) bind(c)
    use iso_c_binding, only: c_int
    implicit none

    integer(c_int), value, intent(in) :: num_levels

    model%num_levels = num_levels
  end subroutine

  ! Wrap up the process of initializing the Haero Fortran module.
  subroutine haerotran_end_init() bind(c)
    ! Nothing here yet!
  end subroutine

  ! This subroutine gets called when the C++ process exits.
  subroutine haerotran_finalize() bind(c)
    if (allocated(model%modes)) then
      deallocate(model%aero_species)
      deallocate(model%gas_species)
      deallocate(model%modes)
    end if
  end subroutine

  !> Provides access to the interstitial aerosol mixing fractions array
  !> for the given mode in the given prognostics object.
  !> @param [in] p A pointer to a prognostics object.
  !> @param [in] mode An index identifying the desired mode.
  function p_int_aero_mix_frac(p, mode) result(retval)
    class(prognostics_t), intent(in)  :: p
    integer, intent(in) :: mode
    real(c_real), pointer, dimension(:,:,:) :: retval

    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    call p_get_int_aero_mix_frac_c(p%ptr, mode, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Provides access to the cloud-borne aerosol mixing fractions array
  !> for the given mode in the given prognostics object.
  !> @param [in] p A pointer to a prognostics object.
  !> @param [in] mode An index identifying the desired mode.
  function p_cld_aero_mix_frac(p, mode) result(retval)
    class(prognostics_t), intent(in)  :: p
    integer, intent(in) :: mode
    real(c_real), pointer, dimension(:,:,:) :: retval

    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    call p_get_cld_aero_mix_frac_c(p%ptr, mode, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Provides access to the gas mole fractions array for the given
  !> prognostics object.
  !> @param [in] p A Prognostics object.
  function p_gas_mole_frac(p) result(retval)
    use iso_c_binding, only: c_ptr, c_int
    class(prognostics_t), value, intent(in) :: p
    real(c_real), pointer, dimension(:,:,:) :: retval

    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    call p_get_gas_mole_frac_c(p%ptr, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Provides access to the modal number fractions array for the given
  !> prognostics object.
  !> @param [in] p A Prognostics object.
  function p_modal_num_densities(p) result(retval)
    use iso_c_binding, only: c_ptr, c_int
    class(prognostics_t), value, intent(in) :: p
    real(c_real), pointer, dimension(:,:,:) :: retval

    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    call p_get_modal_num_densities_c(p%ptr, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Returns true if the given diagnostics object contains a (non-modal)
  !> variable with the given name, false otherwise.
  !> @param [in] d A pointer to a diagnostics object.
  !> @param [in] name The name of the desired modal variable.
  function d_has_var(d, name) result(retval)
    use iso_c_binding, only: c_ptr, c_char, c_bool
    class(diagnostics_t), intent(in) :: d
    character(len=32), intent(in) :: name
    logical(c_bool) :: retval

    character(kind=c_char, len=1), dimension(32) :: c_name
    integer :: i
    do i=1,min(32, len(trim(name)))
      c_name(i) = name(i:i)
    end do
    retval = d_has_var_c(d%ptr, c_name)
  end function

  !> Provides access to the given (non-modal) variable in the given
  !> diagnostics object.
  !> @param [in] d A pointer to a diagnostics object.
  !> @param [in] name The name of the desired modal variable.
  function d_var(d, name) result(retval)
    class(diagnostics_t), intent(in)  :: d
    character(len=32), intent(in) :: name
    real(wp), dimension(:,:,:), pointer :: retval

    character(kind=c_char, len=1), dimension(32) :: c_name
    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    integer :: i

    do i=1,min(32, len(trim(name)))
      c_name(i) = name(i:i)
    end do
    call d_var_c(d%ptr, c_name, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Returns true if the given diagnostics object contains a modal
  !> variable with the given name, false otherwise.
  !> @param [in] d A pointer to a diagnostics object.
  !> @param [in] name The name of the desired modal variable.
  function d_has_modal_var(d, name) result(retval)
    use iso_c_binding, only: c_ptr, c_char, c_bool
    class(diagnostics_t), intent(in) :: d
    character(len=32), intent(in) :: name
    logical(c_bool) :: retval

    character(kind=c_char, len=1), dimension(32) :: c_name
    integer :: i

    do i=1,min(32, len(trim(name)))
      c_name(i) = name(i:i)
    end do
    retval = d_has_modal_var_c(d%ptr, c_name)
  end function

  !> Provides access to the given modal variable in the given
  !> diagnostics object.
  !> @param [in] d A pointer to a diagnostics object.
  !> @param [in] name The name of the desired modal variable.
  function d_modal_var(d, name) result(retval)
    class(diagnostics_t), intent(in)  :: d
    character(len=32), intent(in) :: name
    real(wp), dimension(:,:,:), pointer :: retval

    character(kind=c_char, len=1), dimension(32) :: c_name
    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    integer :: i

    do i=1,min(32, len(trim(name)))
      c_name(i) = name(i:i)
    end do
    call d_modal_var_c(d%ptr, c_name, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Provides access to the interstitial aerosol mixing fractions array
  !> for the given mode in the given tendencies object.
  !> @param [in] p A pointer to a prognostics object.
  !> @param [in] mode An index identifying the desired mode.
  function t_int_aero_mix_frac(t, mode) result(retval)
    class(tendencies_t), intent(in) :: t
    integer(c_int), intent(in) :: mode
    real(c_real), pointer, dimension(:,:,:) :: retval

    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    call t_get_int_aero_mix_frac_c(t%ptr, mode, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Provides access to the cloud-borne aerosol mixing fractions array
  !> for the given mode in the given tendencies object.
  !> @param [in] t A pointer to a tendencies object.
  !> @param [in] mode An index identifying the desired mode.
  function t_cld_aero_mix_frac(t, mode) result(retval)
    class(tendencies_t), intent(in)  :: t
    integer(c_int), intent(in) :: mode
    real(c_real), pointer, dimension(:,:,:) :: retval

    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    call t_get_cld_aero_mix_frac_c(t%ptr, mode, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Provides access to the gas mole fractions array for the given
  !> tendencies object.
  !> @param [in] p A pointer to a tendencies object.
  function t_gas_mole_frac(t) result(retval)
    use iso_c_binding, only: c_ptr, c_int
    class(tendencies_t), value, intent(in) :: t
    real(c_real), pointer, dimension(:,:,:) :: retval

    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    call t_get_gas_mole_frac_c(t%ptr, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

  !> Provides access to the modal number fractions array for the given
  !> tendencies object.
  !> @param [in] t A pointer to a tendencies object.
  function t_modal_num_densities(t) result(retval)
    use iso_c_binding, only: c_ptr, c_int
    class(tendencies_t), value, intent(in) :: t
    real(c_real), pointer, dimension(:,:,:) :: retval

    type(c_ptr) :: v_ptr
    integer(c_int), dimension(3) :: v_shape
    call t_get_modal_num_densities_c(t%ptr, v_ptr, v_shape)
    call c_f_pointer(v_ptr, retval, v_shape)
  end function

end module

