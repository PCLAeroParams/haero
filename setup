#!/usr/bin/env bash

# This script creates a build directory and sticks a config.sh script into it.
# Then config.sh can be edited and run within the build directory.

# Print usage info.
if [ "$1" = "" ]; then
  echo "setup: Creates a build directory with a configuration file."
  echo "Usage: setup build_dir"
  exit 1
fi

# Create the build directory if it doesn't exist.
if [ ! -d $1 ]; then
  mkdir -p $1
fi

# Copy our template config script into place.
echo -e "#!/usr/bin/env bash\n" > $1/config.sh
echo "SOURCE_DIR=$PWD" >> $1/config.sh
cat <<EOT >> $1/config.sh
# ^^^^^^ location of haero source code.

# config.sh -- A CMake configuration script.
# Edit this file to change the parameters in your build. Uncomment exactly one
# value for each parameter.

#-----------------------------------------------------------------------------
#                             Installation prefix
#-----------------------------------------------------------------------------
PREFIX=$PWD/$1

#-----------------------------------------------------------------------------
#                             Third-party libraries
#-----------------------------------------------------------------------------
# Usually you don't need to set these. But we provide this ability in case
# another project (e.g. SCREAM) needs to build this one and use its own
# libraries. We also use these in our automatic testing environment. If any one
# of these variables is supplied for a library, all must be supplied.

#KOKKOS_DIR=/path/to/kokkos

#EKAT_INCLUDE_DIR=/path/to/ekat/includes
#EKAT_LIBRARY_DIR=/path/to/ekat/library
#EKAT_LIBRARY=libekat.a

#OPENBLAS_INCLUDE_DIR=/path/to/openblas/includes
#OPENBLAS_LIBRARY_DIR=/path/to/openblas/library
#OPENBLAS_LIBRARY=libopenblas.a

#TINES_INCLUDE_DIR=/path/to/tines/includes
#TINES_LIBRARY_DIR=/path/to/tines/library
#TINES_LIBRARY=libtines.a

#TCHEM_INCLUDE_DIR=/path/to/tchem/includes
#TCHEM_LIBRARY_DIR=/path/to/tchem/library
#TCHEM_LIBRARY=libtchemcore.a

#-----------------------------------------------------------------------------
#                             Inter-Node Parallelism (MPI)
#-----------------------------------------------------------------------------

# Build with MPI for parallel simulations.
ENABLE_MPI=ON

# The name of the program used to execute MPI programs. Some machines require
# this invocation even for single-process runs.
MPI_EXEC=
#MPI_EXEC=mpiexec

# The flag used by MPI_EXEC to indicate the number of processes to use.
MPI_NP_FLAG=
#MPI_NP_FLAG=-n

# Any extra arguments that need to be passed to MPI_EXEC.
MPI_EXTRA_ARGS=

#-----------------------------------------------------------------------------
#                             On-Node Parallelism (Kokkos)
#-----------------------------------------------------------------------------

# Set this to ON to dispatch aerosol calculations to a GPU.
ENABLE_GPU=OFF

#-----------------------------------------------------------------------------
#                         Build features and parameters
#-----------------------------------------------------------------------------

# Set this to
# * 'Debug' for development (debugging symbols, no optimization)
# * 'Release' for production (no symbols, optimization).
BUILD_TYPE=Debug

# This controls how many floating point numbers we can operate on simultaneously
# using SIMD vector operations. This is mostly for use on CPUs, but some newer
# GPUs also support vectorization. NOTE: Fortran implementations of aerosol
# processes are only supported for a PACK_SIZE of 1.
PACK_SIZE=1

# Set this to
# * 'double' for double precision
# * 'single' for single precision
PRECISION=double

# Set this to ON to enable building the chemistry solver and driver.
ENABLE_CHEMISTRY=OFF

# Uncomment this if you want really verbose builds.
#VERBOSE=ON

#-----------------------------------------------------------------------------
#                                   Compilers
#-----------------------------------------------------------------------------

CXX=c++
CC=cc
FC=gfortran

# Override compilers here (ONLY if you know what you're doing!).

# C++ compiler.
#CXX=c++

# Fortran compiler.
#FC=gfortran

# C compiler.
#CC=cc

#-----------------------------------------------------------------------------
#                   Don't change anything below here.
#-----------------------------------------------------------------------------

# Are we on a special machine?
pushd "\$SOURCE_DIR"/machines >& /dev/null
for MACHINE_FILE in \$(ls)
do
  MACHINE=\${MACHINE_FILE/\.sh/}
  if echo `hostname` | grep -q "\$MACHINE"; then
    echo "Found machine file \$MACHINE_FILE. Setting up environment for \$MACHINE..."
    . ./\$MACHINE.sh
  fi
done
popd >& /dev/null

# We use good old-fashioned UNIX makefiles.
GENERATOR="Unix Makefiles"

OPTIONS=""
if [ "\$ENABLE_MPI" = "ON" ]; then
  if [ ! "\$MPI_EXEC" = "" ]; then
    if [ "\$MPI_NP_FLAG" = "" ]; then
      echo "Error: MPI_NP_FLAG must be set if MPI_EXEC is set."
      exit 1
    fi
    OPTIONS="\$OPTIONS -DHAERO_MPI_EXEC=\$MPI_EXEC -DHAERO_MPI_NP_FLAG=\$MPI_NP_FLAG"
    if [ ! "\$MPI_EXTRA_ARGS" = "" ]; then
      OPTIONS="\$OPTIONS -DHAERO_MPI_EXTRA_ARGS=\$MPI_EXTRA_ARGS"
    fi
  fi
fi
if [ "\$VERBOSE" = "ON" ]; then
  OPTIONS="\$OPTIONS -DCMAKE_VERBOSE_MAKEFILE=ON"
fi

# Configure ekat if needed.
if [ ! "\$EKAT_LIBRARY_DIR" = "" -o ! "\$EKAT_INCLUDE_DIR" = "" -o ! "\$EKAT_LIBRARY" = "" ]; then
  if [ "\$EKAT_LIBRARY" = "" ]; then
    echo "Error: EKAT_LIBRARY must be specified for a custom EKAT library."
    exit 1
  fi
  if [ "\$EKAT_INCLUDE_DIR" = "" ]; then
    echo "Error: EKAT_INCLUDE_DIR must be specified for a custom EKAT library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DEKAT_LIBRARY=\$EKAT_LIBRARY_DIR/\$EKAT_LIBRARY"
  OPTIONS="\$OPTIONS -DEKAT_INCLUDE_DIR=\$EKAT_INCLUDE_DIR"
fi

# Configure OpenBLAS if needed.
if [ ! "\$OPENBLAS_LIBRARY_DIR" = "" -o ! "\$OPENBLAS_INCLUDE_DIR" = "" -o ! "\$OPENBLAS_LIBRARY" = "" ]; then
  if [ "\$OPENBLAS_LIBRARY" = "" ]; then
    echo "Error: OPENBLAS_LIBRARY must be specified for a custom OpenBLAS library."
    exit 1
  fi
  if [ "\$OPENBLAS_INCLUDE_DIR" = "" ]; then
    echo "Error: OPENBLAS_INCLUDE_DIR must be specified for a custom OpenBLAS library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DOPENBLAS_LIBRARY=\$OPENBLAS_LIBRARY_DIR/\$OPENBLAS_LIBRARY"
  OPTIONS="\$OPTIONS -DOPENBLAS_INCLUDE_DIR=\$OPENBLAS_INCLUDE_DIR"
fi

# Configure Tines if needed.
if [ ! "\$TINES_LIBRARY_DIR" = "" -o ! "\$TINES_INCLUDE_DIR" = "" -o ! "\$TINES_LIBRARY" = "" ]; then
  if [ "\$TINES_LIBRARY" = "" ]; then
    echo "Error: TINES_LIBRARY must be specified for a custom Tines library."
    exit 1
  fi
  if [ "\$TINES_INCLUDE_DIR" = "" ]; then
    echo "Error: TINES_INCLUDE_DIR must be specified for a custom Tines library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DTINES_LIBRARY=\$TINES_LIBRARY_DIR/\$TINES_LIBRARY"
  OPTIONS="\$OPTIONS -DTINES_INCLUDE_DIR=\$TINES_INCLUDE_DIR"
fi

# Configure TChem if needed.
if [ ! "\$TCHEM_LIBRARY_DIR" = "" -o ! "\$TCHEM_INCLUDE_DIR" = "" -o ! "\$TCHEM_LIBRARY" = "" ]; then
  if [ "\$TCHEM_LIBRARY" = "" ]; then
    echo "Error: TCHEM_LIBRARY must be specified for a custom TChem library."
    exit 1
  fi
  if [ "\$TCHEM_INCLUDE_DIR" = "" ]; then
    echo "Error: TCHEM_INCLUDE_DIR must be specified for a custom TChem library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DTCHEM_LIBRARY=\$TCHEM_LIBRARY_DIR/\$TCHEM_LIBRARY"
  OPTIONS="\$OPTIONS -DTCHEM_INCLUDE_DIR=\$TCHEM_INCLUDE_DIR"
fi

# Add extra linker flags if needed.
if [ ! "\$EXTRA_LDFLAGS" = "" ]; then
  OPTIONS="\$OPTIONS -DHAERO_EXTRA_LDFLAGS=\$EXTRA_LDFLAGS"
fi

# Clear the build cache.
rm -f CMakeCache.txt

# Configure the build.
cmake \
 -DCMAKE_INSTALL_PREFIX:PATH=\$PREFIX \
 -DCMAKE_BUILD_TYPE=\$BUILD_TYPE \
 -DCMAKE_C_COMPILER=\$CC \
 -DCMAKE_CXX_COMPILER=\$CXX \
 -DHAERO_ENABLE_CHEMISTRY=\$ENABLE_CHEMISTRY \
 -DHAERO_ENABLE_GPU=\$ENABLE_GPU \
 -DHAERO_ENABLE_MPI=\$ENABLE_MPI \
 -DHAERO_PRECISION=\$PRECISION \
 -DHAERO_PACK_SIZE=\$PACK_SIZE \
 \$OPTIONS \
 -G "\$GENERATOR" \
 \$SOURCE_DIR
EOT

# Make config.sh executable.
chmod a+x $1/config.sh

# Give instructions.
echo "Your build directory '$1' is ready."
echo "To configure your build:"
echo "  1. cd $1"
echo "  2. Edit config.sh"
echo "  3. ./config.sh"
echo "  4. Build using 'make -j'."

