#include "write_py_module.hpp"

namespace {

// Writes the given input variable to our Python module.
void write_input_var(FILE* file,
                     const std::vector<skywalker::InputData>& inputs,
                     const std::string& var_name) {
  // If we have a colon in the name, we replace it with an underscore.
  auto name = var_name;
  auto colon = name.find(":");
  while (colon != std::string::npos) {
    name = name.replace(colon, 1, "_");
    colon = name.find(":");
  }
  fprintf(file, "input.%s = [", name.c_str());
  for (const auto& input : inputs) {
    auto var = input[var_name];
    fprintf(file, "%g, ", var);
  }
  fprintf(file, "]\n");
}

// Writes the given output variable to our Python module.
void write_output_var(FILE* file,
                      const std::vector<skywalker::OutputData>& outputs,
                      const std::string& var_name) {
  fprintf(file, "output.%s = [", var_name.c_str());
  for (const auto& output : outputs) {
    auto var = output[var_name];
    fprintf(file, "%g, ", var);
  }
  fprintf(file, "]\n");
}

}  // namespace

namespace skywalker {

void write_py_module(const std::vector<InputData>& inputs,
                     const std::vector<OutputData>& outputs,
                     const char* py_module_name) {
  FILE* file = fopen(py_module_name, "w");
  fprintf(file,
          "# This file was automatically generated by skywalker (HAERO "
          "edition).\n\n");
  fprintf(
      file,
      "# Object is just a dynamic container that stores input/output data.\n");
  fprintf(file, "class Object(object):\n");
  fprintf(file, "    pass\n\n");

  // Write input data.
  fprintf(file, "# Input is stored here.\n");
  fprintf(file, "input = Object()\n");

  // Atmosphere state data.
  write_input_var(file, inputs, "temperature");
  write_input_var(file, inputs, "pressure");
  write_input_var(file, inputs, "relative_humidity");
  write_input_var(file, inputs, "height");
  write_input_var(file, inputs, "hydrostatic_dp");
  write_input_var(file, inputs, "planetary_boundary_layer_height");

  // Now we write out aerosol prognostics.
  auto aero_config = inputs[0].aero_config;
  for (int m = 0; m < aero_config.num_modes(); ++m) {
    auto mode = aero_config.h_aerosol_modes[m];
    auto number_conc_name = mode.name() + std::string(":number_conc");
    write_input_var(file, inputs, number_conc_name.c_str());
    auto species_for_mode = aero_config.aerosol_species_for_mode(m);
    for (auto species : species_for_mode) {
      auto sym = species.symbol();
      transform(sym.begin(), sym.end(), sym.begin(), ::tolower);
      auto species_name = mode.name() + std::string(":") + sym;
      write_input_var(file, inputs, species_name.c_str());
    }
  }

  // Write out gases.
  for (int g = 0; g < aero_config.num_gases(); ++g) {
    auto gas = aero_config.h_gas_species[g];
    auto gas_name = gas.symbol();
    transform(gas_name.begin(), gas_name.end(), gas_name.begin(), ::tolower);
    write_input_var(file, inputs, gas_name.c_str());
  }

  // Write output data.
  fprintf(file, "\n# Output data is stored here.\n");
  fprintf(file, "output = Object()\n");

  // Aerosol prognostics.
  for (int m = 0; m < aero_config.num_modes(); ++m) {
    auto mode = aero_config.h_aerosol_modes[m];
    write_output_var(file, outputs, mode.name().c_str());
    auto species_for_mode = aero_config.aerosol_species_for_mode(m);
    for (auto species : species_for_mode) {
      auto sym = species.symbol();
      transform(sym.begin(), sym.end(), sym.begin(), ::tolower);
      auto species_name = mode.name() + std::string(":") + sym;
      write_output_var(file, outputs, species_name.c_str());
    }
  }

  // Gases.
  for (int g = 0; g < aero_config.num_gases(); ++g) {
    auto gas = aero_config.h_gas_species[g];
    auto gas_name = gas.symbol();
    transform(gas_name.begin(), gas_name.end(), gas_name.begin(), ::tolower);
    write_output_var(file, outputs, gas_name.c_str());
  }

  fclose(file);
}

}  // namespace skywalker
