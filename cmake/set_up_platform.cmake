# This macro identifies compilers and third-party library needs
# for particular hosts.
macro(set_up_platform)

  # Are we on Linux?
  if (UNIX AND NOT APPLE)
    set(LINUX ON)
  endif()

  # Do we have bash?
  find_program(BASH bash)
  if (BASH STREQUAL "BASH_NOTFOUND")
    message(FATAL_ERROR "Bash is required, but is not available on this system.")
  endif()

  # Do we have make?
  find_program(MAKE make)
  if (MAKE STREQUAL "MAKE_NOTFOUND")
    message(FATAL_ERROR "Make is required, but is not available on this system.")
  endif()

  # Do we have git?
  find_program(GIT git)
  if (GIT STREQUAL "GIT_NOTFOUND")
    message(WARNING "Git not found. Hope you're not developing on this system.")
    set(HAVE_GIT FALSE)
  else()
    set(HAVE_GIT TRUE)
  endif()

  include(GNUInstallDirs)

  # Configure EKAT (whether built externally or internally).
  if (EKAT_SOURCE_DIR)
    if (NOT EXISTS ${EKAT_SOURCE_DIR})
      message(FATAL_ERROR "Invalid EKAT source dir: ${EKAT_SOURCE_DIR}.")
    elseif()
      if (NOT EXISTS ${EKAT_SOURCE_DIR}/src)
        message(FATAL_ERROR "EKAT source dir has no src/ Ñ•ubdirectory!")
      endif()
    endif()
    if (NOT EKAT_BINARY_DIR)
      message(FATAL_ERROR "EKAT source dir was given, but binary dir was not!")
    elseif (NOT EXISTS ${EKAT_BINARY_DIR})
      message(FATAL_ERROR "Invalid EKAT binary dir: ${EKAT_BINARY_DIR}.")
    elseif (NOT EXISTS ${EKAT_BINARY_DIR}/src/ekat/libekat.a)
      message(FATAL_ERROR "EKAT binary dir does not contain an EKAT library!")
    endif()
    message(STATUS "Using pre-built EKAT library in ${EKAT_BINARY_DIR}.")
    set(HAERO_BUILDS_EKAT OFF)
  else()
    set(EKAT_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ext/ekat")
    set(EKAT_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/externals/ekat")
    message(STATUS "Building EKAT internally.")
    set(HAERO_BUILDS_EKAT ON)
  endif()

  # The following libraries are only needed when chemistry is enabled.
  if (HAERO_ENABLE_CHEMISTRY)
    if (NOT CMAKE_CXX_COMPILER_ID MATCHES "Intel")
      if (OPENBLAS_INCLUDE_DIR)
        if (NOT EXISTS ${OPENBLAS_INCLUDE_DIR})
          message(FATAL_ERROR "Couldn't find OpenBLAS include dir at ${OPENBLAS_INCLUDE_DIR}.")
        endif()
        message(STATUS "Using OpenBLAS include dir: ${OPENBLAS_INCLUDE_DIR}.")
      else()
        set(OPENBLAS_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/include")
      endif()
      if (OPENBLAS_LIBRARY)
        if (NOT EXISTS ${OPENBLAS_LIBRARY})
          message(FATAL_ERROR "Couldn't find OpenBLAS library at ${OPENBLAS_LIBRARY}.")
        endif()
        message(STATUS "Using OpenBLAS library at ${OPENBLAS_LIBRARY}.")
      else()
        # OpenBLAS gets installed in the lib directory--it doesn't know about lib64.
        set(OPENBLAS_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/lib")
        set(OPENBLAS_LIBRARY ${OPENBLAS_LIBRARY_DIR}/libopenblas.a)
        message(STATUS "Building OpenBLAS library: ${OPENBLAS_LIBRARY}.")
      endif()
      get_filename_component(OPENBLAS_LIBRARY_DIR ${OPENBLAS_LIBRARY} DIRECTORY)
    endif()

    if (TINES_INCLUDE_DIR)
      if (NOT EXISTS ${TINES_INCLUDE_DIR})
        message(FATAL_ERROR "Couldn't find Tines include dir at ${TINES_INCLUDE_DIR}.")
      endif()
      message(STATUS "Using Tines include dir: ${TINES_INCLUDE_DIR}.")
    else()
      set(TINES_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/include")
    endif()
    if (TINES_LIBRARY)
      if (NOT EXISTS ${TINES_LIBRARY})
        message(FATAL_ERROR "Couldn't find Tines library at ${TINES_LIBRARY}.")
      endif()
      message(STATUS "Using Tines library at ${TINES_LIBRARY}.")
    else()
      set(TINES_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")
      set(TINES_LIBRARY ${TINES_LIBRARY_DIR}/libtines.a)
      message(STATUS "Building Tines library: ${TINES_LIBRARY}.")
    endif()
    get_filename_component(TINES_LIBRARY_DIR ${TINES_LIBRARY} DIRECTORY)

    if (TCHEM_INCLUDE_DIR)
      if (NOT EXISTS ${TCHEM_INCLUDE_DIR})
        message(FATAL_ERROR "Couldn't find TChem include dir at ${TCHEM_INCLUDE_DIR}.")
      endif()
      message(STATUS "Using TChem include dir: ${TCHEM_INCLUDE_DIR}.")
    else()
      set(TCHEM_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/include")
    endif()
    if (TCHEM_LIBRARY)
      if (NOT EXISTS ${TCHEM_LIBRARY})
        message(FATAL_ERROR "Couldn't find TChem library at ${TCHEM_LIBRARY}.")
      endif()
      message(STATUS "Using TChem library at ${TCHEM_LIBRARY}.")
    else()
      set(TCHEM_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")
      set(TCHEM_LIBRARY ${TCHEM_LIBRARY_DIR}/libtchem.a)
      message(STATUS "Building TChem library: ${TCHEM_LIBRARY}.")
    endif()
    get_filename_component(TCHEM_LIBRARY_DIR ${TCHEM_LIBRARY} DIRECTORY)
  endif()

  if (APPLE)
    set(NEED_LAPACK FALSE)
  else()
    set(NEED_LAPACK TRUE)
  endif()

  # Certain tools (e.g. patch) require TMPDIR to be defined. If it is not,
  # we do so here.
  set(TMPDIR_VAR $ENV{TMPDIR})
  if (NOT TMPDIR_VAR)
    set(ENV{TMPDIR} "/tmp")
  endif()

endmacro()
